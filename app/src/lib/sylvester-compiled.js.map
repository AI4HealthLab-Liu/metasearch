{"version":3,"sources":["sylvester.js"],"names":[],"mappings":"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","file":"sylvester-compiled.js","sourcesContent":["// === Sylvester ===\r\n// Vector and Matrix mathematics modules for JavaScript\r\n// Copyright (c) 2007 James Coglan\r\n// \r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the \"Software\"),\r\n// to deal in the Software without restriction, including without limitation\r\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n// and/or sell copies of the Software, and to permit persons to whom the\r\n// Software is furnished to do so, subject to the following conditions:\r\n// \r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n// \r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n// DEALINGS IN THE SOFTWARE.\r\n\r\nvar Sylvester = {\r\n  version: '0.1.3',\r\n  precision: 1e-6\r\n};\r\n\r\nfunction Vector() {}\r\nVector.prototype = {\r\n\r\n  // Returns element i of the vector\r\n  e: function(i) {\r\n    return (i < 1 || i > this.elements.length) ? null : this.elements[i-1];\r\n  },\r\n\r\n  // Returns the number of elements the vector has\r\n  dimensions: function() {\r\n    return this.elements.length;\r\n  },\r\n\r\n  // Returns the modulus ('length') of the vector\r\n  modulus: function() {\r\n    return Math.sqrt(this.dot(this));\r\n  },\r\n\r\n  // Returns true iff the vector is equal to the argument\r\n  eql: function(vector) {\r\n    var n = this.elements.length;\r\n    var V = vector.elements || vector;\r\n    if (n != V.length) { return false; }\r\n    do {\r\n      if (Math.abs(this.elements[n-1] - V[n-1]) > Sylvester.precision) { return false; }\r\n    } while (--n);\r\n    return true;\r\n  },\r\n\r\n  // Returns a copy of the vector\r\n  dup: function() {\r\n    return Vector.create(this.elements);\r\n  },\r\n\r\n  // Maps the vector to another vector according to the given function\r\n  map: function(fn) {\r\n    var elements = [];\r\n    this.each(function(x, i) {\r\n      elements.push(fn(x, i));\r\n    });\r\n    return Vector.create(elements);\r\n  },\r\n  \r\n  // Calls the iterator for each element of the vector in turn\r\n  each: function(fn) {\r\n    var n = this.elements.length, k = n, i;\r\n    do { i = k - n;\r\n      fn(this.elements[i], i+1);\r\n    } while (--n);\r\n  },\r\n\r\n  // Returns a new vector created by normalizing the receiver\r\n  toUnitVector: function() {\r\n    var r = this.modulus();\r\n    if (r === 0) { return this.dup(); }\r\n    return this.map(function(x) { return x/r; });\r\n  },\r\n\r\n  // Returns the angle between the vector and the argument (also a vector)\r\n  angleFrom: function(vector) {\r\n    var V = vector.elements || vector;\r\n    var n = this.elements.length, k = n, i;\r\n    if (n != V.length) { return null; }\r\n    var dot = 0, mod1 = 0, mod2 = 0;\r\n    // Work things out in parallel to save time\r\n    this.each(function(x, i) {\r\n      dot += x * V[i-1];\r\n      mod1 += x * x;\r\n      mod2 += V[i-1] * V[i-1];\r\n    });\r\n    mod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);\r\n    if (mod1*mod2 === 0) { return null; }\r\n    var theta = dot / (mod1*mod2);\r\n    if (theta < -1) { theta = -1; }\r\n    if (theta > 1) { theta = 1; }\r\n    return Math.acos(theta);\r\n  },\r\n\r\n  // Returns true iff the vector is parallel to the argument\r\n  isParallelTo: function(vector) {\r\n    var angle = this.angleFrom(vector);\r\n    return (angle === null) ? null : (angle <= Sylvester.precision);\r\n  },\r\n\r\n  // Returns true iff the vector is antiparallel to the argument\r\n  isAntiparallelTo: function(vector) {\r\n    var angle = this.angleFrom(vector);\r\n    return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);\r\n  },\r\n\r\n  // Returns true iff the vector is perpendicular to the argument\r\n  isPerpendicularTo: function(vector) {\r\n    var dot = this.dot(vector);\r\n    return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);\r\n  },\r\n\r\n  // Returns the result of adding the argument to the vector\r\n  add: function(vector) {\r\n    var V = vector.elements || vector;\r\n    if (this.elements.length != V.length) { return null; }\r\n    return this.map(function(x, i) { return x + V[i-1]; });\r\n  },\r\n\r\n  // Returns the result of subtracting the argument from the vector\r\n  subtract: function(vector) {\r\n    var V = vector.elements || vector;\r\n    if (this.elements.length != V.length) { return null; }\r\n    return this.map(function(x, i) { return x - V[i-1]; });\r\n  },\r\n\r\n  // Returns the result of multiplying the elements of the vector by the argument\r\n  multiply: function(k) {\r\n    return this.map(function(x) { return x*k; });\r\n  },\r\n\r\n  x: function(k) { return this.multiply(k); },\r\n\r\n  // Returns the scalar product of the vector with the argument\r\n  // Both vectors must have equal dimensionality\r\n  dot: function(vector) {\r\n    var V = vector.elements || vector;\r\n    var i, product = 0, n = this.elements.length;\r\n    if (n != V.length) { return null; }\r\n    do { product += this.elements[n-1] * V[n-1]; } while (--n);\r\n    return product;\r\n  },\r\n\r\n  // Returns the vector product of the vector with the argument\r\n  // Both vectors must have dimensionality 3\r\n  cross: function(vector) {\r\n    var B = vector.elements || vector;\r\n    if (this.elements.length != 3 || B.length != 3) { return null; }\r\n    var A = this.elements;\r\n    return Vector.create([\r\n      (A[1] * B[2]) - (A[2] * B[1]),\r\n      (A[2] * B[0]) - (A[0] * B[2]),\r\n      (A[0] * B[1]) - (A[1] * B[0])\r\n    ]);\r\n  },\r\n\r\n  // Returns the (absolute) largest element of the vector\r\n  max: function() {\r\n    var m = 0, n = this.elements.length, k = n, i;\r\n    do { i = k - n;\r\n      if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }\r\n    } while (--n);\r\n    return m;\r\n  },\r\n\r\n  // Returns the index of the first match found\r\n  indexOf: function(x) {\r\n    var index = null, n = this.elements.length, k = n, i;\r\n    do { i = k - n;\r\n      if (index === null && this.elements[i] == x) {\r\n        index = i + 1;\r\n      }\r\n    } while (--n);\r\n    return index;\r\n  },\r\n\r\n  // Returns a diagonal matrix with the vector's elements as its diagonal elements\r\n  toDiagonalMatrix: function() {\r\n    return Matrix.Diagonal(this.elements);\r\n  },\r\n\r\n  // Returns the result of rounding the elements of the vector\r\n  round: function() {\r\n    return this.map(function(x) { return Math.round(x); });\r\n  },\r\n\r\n  // Returns a copy of the vector with elements set to the given value if they\r\n  // differ from it by less than Sylvester.precision\r\n  snapTo: function(x) {\r\n    return this.map(function(y) {\r\n      return (Math.abs(y - x) <= Sylvester.precision) ? x : y;\r\n    });\r\n  },\r\n\r\n  // Returns the vector's distance from the argument, when considered as a point in space\r\n  distanceFrom: function(obj) {\r\n    if (obj.anchor) { return obj.distanceFrom(this); }\r\n    var V = obj.elements || obj;\r\n    if (V.length != this.elements.length) { return null; }\r\n    var sum = 0, part;\r\n    this.each(function(x, i) {\r\n      part = x - V[i-1];\r\n      sum += part * part;\r\n    });\r\n    return Math.sqrt(sum);\r\n  },\r\n\r\n  // Returns true if the vector is point on the given line\r\n  liesOn: function(line) {\r\n    return line.contains(this);\r\n  },\r\n\r\n  // Return true iff the vector is a point in the given plane\r\n  liesIn: function(plane) {\r\n    return plane.contains(this);\r\n  },\r\n\r\n  // Rotates the vector about the given object. The object should be a \r\n  // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!\r\n  rotate: function(t, obj) {\r\n    var V, R, x, y, z;\r\n    switch (this.elements.length) {\r\n      case 2:\r\n        V = obj.elements || obj;\r\n        if (V.length != 2) { return null; }\r\n        R = Matrix.Rotation(t).elements;\r\n        x = this.elements[0] - V[0];\r\n        y = this.elements[1] - V[1];\r\n        return Vector.create([\r\n          V[0] + R[0][0] * x + R[0][1] * y,\r\n          V[1] + R[1][0] * x + R[1][1] * y\r\n        ]);\r\n        break;\r\n      case 3:\r\n        if (!obj.direction) { return null; }\r\n        var C = obj.pointClosestTo(this).elements;\r\n        R = Matrix.Rotation(t, obj.direction).elements;\r\n        x = this.elements[0] - C[0];\r\n        y = this.elements[1] - C[1];\r\n        z = this.elements[2] - C[2];\r\n        return Vector.create([\r\n          C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,\r\n          C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,\r\n          C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z\r\n        ]);\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n  },\r\n\r\n  // Returns the result of reflecting the point in the given point, line or plane\r\n  reflectionIn: function(obj) {\r\n    if (obj.anchor) {\r\n      // obj is a plane or line\r\n      var P = this.elements.slice();\r\n      var C = obj.pointClosestTo(P).elements;\r\n      return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);\r\n    } else {\r\n      // obj is a point\r\n      var Q = obj.elements || obj;\r\n      if (this.elements.length != Q.length) { return null; }\r\n      return this.map(function(x, i) { return Q[i-1] + (Q[i-1] - x); });\r\n    }\r\n  },\r\n\r\n  // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added\r\n  to3D: function() {\r\n    var V = this.dup();\r\n    switch (V.elements.length) {\r\n      case 3: break;\r\n      case 2: V.elements.push(0); break;\r\n      default: return null;\r\n    }\r\n    return V;\r\n  },\r\n\r\n  // Returns a string representation of the vector\r\n  inspect: function() {\r\n    return '[' + this.elements.join(', ') + ']';\r\n  },\r\n\r\n  // Set vector's elements from an array\r\n  setElements: function(els) {\r\n    this.elements = (els.elements || els).slice();\r\n    return this;\r\n  }\r\n};\r\n  \r\n// Constructor function\r\nVector.create = function(elements) {\r\n  var V = new Vector();\r\n  return V.setElements(elements);\r\n};\r\n\r\n// i, j, k unit vectors\r\nVector.i = Vector.create([1,0,0]);\r\nVector.j = Vector.create([0,1,0]);\r\nVector.k = Vector.create([0,0,1]);\r\n\r\n// Random vector of size n\r\nVector.Random = function(n) {\r\n  var elements = [];\r\n  do { elements.push(Math.random());\r\n  } while (--n);\r\n  return Vector.create(elements);\r\n};\r\n\r\n// Vector filled with zeros\r\nVector.Zero = function(n) {\r\n  var elements = [];\r\n  do { elements.push(0);\r\n  } while (--n);\r\n  return Vector.create(elements);\r\n};\r\n\r\n\r\n\r\nfunction Matrix() {}\r\nMatrix.prototype = {\r\n\r\n  // Returns element (i,j) of the matrix\r\n  e: function(i,j) {\r\n    if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }\r\n    return this.elements[i-1][j-1];\r\n  },\r\n\r\n  // Returns row k of the matrix as a vector\r\n  row: function(i) {\r\n    if (i > this.elements.length) { return null; }\r\n    return Vector.create(this.elements[i-1]);\r\n  },\r\n\r\n  // Returns column k of the matrix as a vector\r\n  col: function(j) {\r\n    if (j > this.elements[0].length) { return null; }\r\n    var col = [], n = this.elements.length, k = n, i;\r\n    do { i = k - n;\r\n      col.push(this.elements[i][j-1]);\r\n    } while (--n);\r\n    return Vector.create(col);\r\n  },\r\n\r\n  // Returns the number of rows/columns the matrix has\r\n  dimensions: function() {\r\n    return {rows: this.elements.length, cols: this.elements[0].length};\r\n  },\r\n\r\n  // Returns the number of rows in the matrix\r\n  rows: function() {\r\n    return this.elements.length;\r\n  },\r\n\r\n  // Returns the number of columns in the matrix\r\n  cols: function() {\r\n    return this.elements[0].length;\r\n  },\r\n\r\n  // Returns true iff the matrix is equal to the argument. You can supply\r\n  // a vector as the argument, in which case the receiver must be a\r\n  // one-column matrix equal to the vector.\r\n  eql: function(matrix) {\r\n    var M = matrix.elements || matrix;\r\n    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\r\n    if (this.elements.length != M.length ||\r\n        this.elements[0].length != M[0].length) { return false; }\r\n    var ni = this.elements.length, ki = ni, i, nj, kj = this.elements[0].length, j;\r\n    do { i = ki - ni;\r\n      nj = kj;\r\n      do { j = kj - nj;\r\n        if (Math.abs(this.elements[i][j] - M[i][j]) > Sylvester.precision) { return false; }\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return true;\r\n  },\r\n\r\n  // Returns a copy of the matrix\r\n  dup: function() {\r\n    return Matrix.create(this.elements);\r\n  },\r\n\r\n  // Maps the matrix to another matrix (of the same dimensions) according to the given function\r\n  map: function(fn) {\r\n    var els = [], ni = this.elements.length, ki = ni, i, nj, kj = this.elements[0].length, j;\r\n    do { i = ki - ni;\r\n      nj = kj;\r\n      els[i] = [];\r\n      do { j = kj - nj;\r\n        els[i][j] = fn(this.elements[i][j], i + 1, j + 1);\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return Matrix.create(els);\r\n  },\r\n\r\n  // Returns true iff the argument has the same dimensions as the matrix\r\n  isSameSizeAs: function(matrix) {\r\n    var M = matrix.elements || matrix;\r\n    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\r\n    return (this.elements.length == M.length &&\r\n        this.elements[0].length == M[0].length);\r\n  },\r\n\r\n  // Returns the result of adding the argument to the matrix\r\n  add: function(matrix) {\r\n    var M = matrix.elements || matrix;\r\n    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\r\n    if (!this.isSameSizeAs(M)) { return null; }\r\n    return this.map(function(x, i, j) { return x + M[i-1][j-1]; });\r\n  },\r\n\r\n  // Returns the result of subtracting the argument from the matrix\r\n  subtract: function(matrix) {\r\n    var M = matrix.elements || matrix;\r\n    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\r\n    if (!this.isSameSizeAs(M)) { return null; }\r\n    return this.map(function(x, i, j) { return x - M[i-1][j-1]; });\r\n  },\r\n\r\n  // Returns true iff the matrix can multiply the argument from the left\r\n  canMultiplyFromLeft: function(matrix) {\r\n    var M = matrix.elements || matrix;\r\n    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\r\n    // this.columns should equal matrix.rows\r\n    return (this.elements[0].length == M.length);\r\n  },\r\n\r\n  // Returns the result of multiplying the matrix from the right by the argument.\r\n  // If the argument is a scalar then just multiply all the elements. If the argument is\r\n  // a vector, a vector is returned, which saves you having to remember calling\r\n  // col(1) on the result.\r\n  multiply: function(matrix) {\r\n    if (!matrix.elements) {\r\n      return this.map(function(x) { return x * matrix; });\r\n    }\r\n    var returnVector = matrix.modulus ? true : false;\r\n    var M = matrix.elements || matrix;\r\n    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\r\n    if (!this.canMultiplyFromLeft(M)) { return null; }\r\n    var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n    var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n    do { i = ki - ni;\r\n      elements[i] = [];\r\n      nj = kj;\r\n      do { j = kj - nj;\r\n        sum = 0;\r\n        nc = cols;\r\n        do { c = cols - nc;\r\n          sum += this.elements[i][c] * M[c][j];\r\n        } while (--nc);\r\n        elements[i][j] = sum;\r\n      } while (--nj);\r\n    } while (--ni);\r\n    var M = Matrix.create(elements);\r\n    return returnVector ? M.col(1) : M;\r\n  },\r\n\r\n  x: function(matrix) { return this.multiply(matrix); },\r\n\r\n  // Returns a submatrix taken from the matrix\r\n  // Argument order is: start row, start col, nrows, ncols\r\n  // Element selection wraps if the required index is outside the matrix's bounds, so you could\r\n  // use this to perform row/column cycling or copy-augmenting.\r\n  minor: function(a, b, c, d) {\r\n    var elements = [], ni = c, i, nj, j;\r\n    var rows = this.elements.length, cols = this.elements[0].length;\r\n    do { i = c - ni;\r\n      elements[i] = [];\r\n      nj = d;\r\n      do { j = d - nj;\r\n        elements[i][j] = this.elements[(a+i-1)%rows][(b+j-1)%cols];\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return Matrix.create(elements);\r\n  },\r\n\r\n  // Returns the transpose of the matrix\r\n  transpose: function() {\r\n    var rows = this.elements.length, cols = this.elements[0].length;\r\n    var elements = [], ni = cols, i, nj, j;\r\n    do { i = cols - ni;\r\n      elements[i] = [];\r\n      nj = rows;\r\n      do { j = rows - nj;\r\n        elements[i][j] = this.elements[j][i];\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return Matrix.create(elements);\r\n  },\r\n\r\n  // Returns true iff the matrix is square\r\n  isSquare: function() {\r\n    return (this.elements.length == this.elements[0].length);\r\n  },\r\n\r\n  // Returns the (absolute) largest element of the matrix\r\n  max: function() {\r\n    var m = 0, ni = this.elements.length, ki = ni, i, nj, kj = this.elements[0].length, j;\r\n    do { i = ki - ni;\r\n      nj = kj;\r\n      do { j = kj - nj;\r\n        if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return m;\r\n  },\r\n\r\n  // Returns the indeces of the first match found by reading row-by-row from left to right\r\n  indexOf: function(x) {\r\n    var index = null, ni = this.elements.length, ki = ni, i, nj, kj = this.elements[0].length, j;\r\n    do { i = ki - ni;\r\n      nj = kj;\r\n      do { j = kj - nj;\r\n        if (this.elements[i][j] == x) { return {i: i+1, j: j+1}; }\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return null;\r\n  },\r\n\r\n  // If the matrix is square, returns the diagonal elements as a vector.\r\n  // Otherwise, returns null.\r\n  diagonal: function() {\r\n    if (!this.isSquare) { return null; }\r\n    var els = [], n = this.elements.length, k = n, i;\r\n    do { i = k - n;\r\n      els.push(this.elements[i][i]);\r\n    } while (--n);\r\n    return Vector.create(els);\r\n  },\r\n\r\n  // Make the matrix upper (right) triangular by Gaussian elimination.\r\n  // This method only adds multiples of rows to other rows. No rows are\r\n  // scaled up or switched, and the determinant is preserved.\r\n  toRightTriangular: function() {\r\n    var M = this.dup(), els;\r\n    var n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n    do { i = k - n;\r\n      if (M.elements[i][i] == 0) {\r\n        for (j = i + 1; j < k; j++) {\r\n          if (M.elements[j][i] != 0) {\r\n            els = []; np = kp;\r\n            do { p = kp - np;\r\n              els.push(M.elements[i][p] + M.elements[j][p]);\r\n            } while (--np);\r\n            M.elements[i] = els;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (M.elements[i][i] != 0) {\r\n        for (j = i + 1; j < k; j++) {\r\n          var multiplier = M.elements[j][i] / M.elements[i][i];\r\n          els = []; np = kp;\r\n          do { p = kp - np;\r\n            // Elements with column numbers up to an including the number\r\n            // of the row that we're subtracting can safely be set straight to\r\n            // zero, since that's the point of this routine and it avoids having\r\n            // to loop over and correct rounding errors later\r\n            els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\r\n          } while (--np);\r\n          M.elements[j] = els;\r\n        }\r\n      }\r\n    } while (--n);\r\n    return M;\r\n  },\r\n\r\n  toUpperTriangular: function() { return this.toRightTriangular(); },\r\n\r\n  // Returns the determinant for square matrices\r\n  determinant: function() {\r\n    if (!this.isSquare()) { return null; }\r\n    var M = this.toRightTriangular();\r\n    var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n    do { i = k - n + 1;\r\n      det = det * M.elements[i][i];\r\n    } while (--n);\r\n    return det;\r\n  },\r\n\r\n  det: function() { return this.determinant(); },\r\n\r\n  // Returns true iff the matrix is singular\r\n  isSingular: function() {\r\n    return (this.isSquare() && this.determinant() === 0);\r\n  },\r\n\r\n  // Returns the trace for square matrices\r\n  trace: function() {\r\n    if (!this.isSquare()) { return null; }\r\n    var tr = this.elements[0][0], n = this.elements.length - 1, k = n, i;\r\n    do { i = k - n + 1;\r\n      tr += this.elements[i][i];\r\n    } while (--n);\r\n    return tr;\r\n  },\r\n\r\n  tr: function() { return this.trace(); },\r\n\r\n  // Returns the rank of the matrix\r\n  rank: function() {\r\n    var M = this.toRightTriangular(), rank = 0;\r\n    var ni = this.elements.length, ki = ni, i, nj, kj = this.elements[0].length, j;\r\n    do { i = ki - ni;\r\n      nj = kj;\r\n      do { j = kj - nj;\r\n        if (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return rank;\r\n  },\r\n  \r\n  rk: function() { return this.rank(); },\r\n\r\n  // Returns the result of attaching the given argument to the right-hand side of the matrix\r\n  augment: function(matrix) {\r\n    var M = matrix.elements || matrix;\r\n    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\r\n    var T = this.dup(), cols = T.elements[0].length;\r\n    var ni = T.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n    if (ni != M.length) { return null; }\r\n    do { i = ki - ni;\r\n      nj = kj;\r\n      do { j = kj - nj;\r\n        T.elements[i][cols + j] = M[i][j];\r\n      } while (--nj);\r\n    } while (--ni);\r\n    return T;\r\n  },\r\n\r\n  // Returns the inverse (if one exists) using Gauss-Jordan\r\n  inverse: function() {\r\n    if (!this.isSquare() || this.isSingular()) { return null; }\r\n    var ni = this.elements.length, ki = ni, i, j;\r\n    var M = this.augment(Matrix.I(ni)).toRightTriangular();\r\n    var np, kp = M.elements[0].length, p, els, divisor;\r\n    var inverse_elements = [], new_element;\r\n    // Matrix is non-singular so there will be no zeros on the diagonal\r\n    // Cycle through rows from last to first\r\n    do { i = ni - 1;\r\n      // First, normalise diagonal elements to 1\r\n      els = []; np = kp;\r\n      inverse_elements[i] = [];\r\n      divisor = M.elements[i][i];\r\n      do { p = kp - np;\r\n        new_element = M.elements[i][p] / divisor;\r\n        els.push(new_element);\r\n        // Shuffle of the current row of the right hand side into the results\r\n        // array as it will not be modified by later runs through this loop\r\n        if (p >= ki) { inverse_elements[i].push(new_element); }\r\n      } while (--np);\r\n      M.elements[i] = els;\r\n      // Then, subtract this row from those above it to\r\n      // give the identity matrix on the left hand side\r\n      for (j = 0; j < i; j++) {\r\n        els = []; np = kp;\r\n        do { p = kp - np;\r\n          els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\r\n        } while (--np);\r\n        M.elements[j] = els;\r\n      }\r\n    } while (--ni);\r\n    return Matrix.create(inverse_elements);\r\n  },\r\n\r\n  inv: function() { return this.inverse(); },\r\n\r\n  // Returns the result of rounding all the elements\r\n  round: function() {\r\n    return this.map(function(x) { return Math.round(x); });\r\n  },\r\n\r\n  // Returns a copy of the matrix with elements set to the given value if they\r\n  // differ from it by less than Sylvester.precision\r\n  snapTo: function(x) {\r\n    return this.map(function(p) {\r\n      return (Math.abs(p - x) <= Sylvester.precision) ? x : p;\r\n    });\r\n  },\r\n\r\n  // Returns a string representation of the matrix\r\n  inspect: function() {\r\n    var matrix_rows = [];\r\n    var n = this.elements.length, k = n, i;\r\n    do { i = k - n;\r\n      matrix_rows.push(Vector.create(this.elements[i]).inspect());\r\n    } while (--n);\r\n    return matrix_rows.join('\\n');\r\n  },\r\n\r\n  // Set the matrix's elements from an array. If the argument passed\r\n  // is a vector, the resulting matrix will be a single column.\r\n  setElements: function(els) {\r\n    var i, elements = els.elements || els;\r\n    if (typeof(elements[0][0]) != 'undefined') {\r\n      var ni = elements.length, ki = ni, nj, kj, j;\r\n      this.elements = [];\r\n      do { i = ki - ni;\r\n        nj = elements[i].length; kj = nj;\r\n        this.elements[i] = [];\r\n        do { j = kj - nj;\r\n          this.elements[i][j] = elements[i][j];\r\n        } while (--nj);\r\n      } while(--ni);\r\n      return this;\r\n    }\r\n    var n = elements.length, k = n;\r\n    this.elements = [];\r\n    do { i = k - n;\r\n      this.elements.push([elements[i]]);\r\n    } while (--n);\r\n    return this;\r\n  }\r\n};\r\n\r\n// Constructor function\r\nMatrix.create = function(elements) {\r\n  var M = new Matrix();\r\n  return M.setElements(elements);\r\n};\r\n\r\n// Identity matrix of size n\r\nMatrix.I = function(n) {\r\n  var els = [], k = n, i, nj, j;\r\n  do { i = k - n;\r\n    els[i] = []; nj = k;\r\n    do { j = k - nj;\r\n      els[i][j] = (i == j) ? 1 : 0;\r\n    } while (--nj);\r\n  } while (--n);\r\n  return Matrix.create(els);\r\n};\r\n\r\n// Diagonal matrix - all off-diagonal elements are zero\r\nMatrix.Diagonal = function(elements) {\r\n  var n = elements.length, k = n, i;\r\n  var M = Matrix.I(n);\r\n  do { i = k - n;\r\n    M.elements[i][i] = elements[i];\r\n  } while (--n);\r\n  return M;\r\n};\r\n\r\n// Rotation matrix about some axis. If no axis is\r\n// supplied, assume we're after a 2D transform\r\nMatrix.Rotation = function(theta, a) {\r\n  if (!a) {\r\n    return Matrix.create([\r\n      [Math.cos(theta),  -Math.sin(theta)],\r\n      [Math.sin(theta),   Math.cos(theta)]\r\n    ]);\r\n  }\r\n  var axis = a.dup();\r\n  if (axis.elements.length != 3) { return null; }\r\n  var mod = axis.modulus();\r\n  var x = axis.elements[0]/mod, y = axis.elements[1]/mod, z = axis.elements[2]/mod;\r\n  var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;\r\n  // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\r\n  // That proof rotates the co-ordinate system so theta\r\n  // becomes -theta and sin becomes -sin here.\r\n  return Matrix.create([\r\n    [ t*x*x + c, t*x*y - s*z, t*x*z + s*y ],\r\n    [ t*x*y + s*z, t*y*y + c, t*y*z - s*x ],\r\n    [ t*x*z - s*y, t*y*z + s*x, t*z*z + c ]\r\n  ]);\r\n};\r\n\r\n// Special case rotations\r\nMatrix.RotationX = function(t) {\r\n  var c = Math.cos(t), s = Math.sin(t);\r\n  return Matrix.create([\r\n    [  1,  0,  0 ],\r\n    [  0,  c, -s ],\r\n    [  0,  s,  c ]\r\n  ]);\r\n};\r\nMatrix.RotationY = function(t) {\r\n  var c = Math.cos(t), s = Math.sin(t);\r\n  return Matrix.create([\r\n    [  c,  0,  s ],\r\n    [  0,  1,  0 ],\r\n    [ -s,  0,  c ]\r\n  ]);\r\n};\r\nMatrix.RotationZ = function(t) {\r\n  var c = Math.cos(t), s = Math.sin(t);\r\n  return Matrix.create([\r\n    [  c, -s,  0 ],\r\n    [  s,  c,  0 ],\r\n    [  0,  0,  1 ]\r\n  ]);\r\n};\r\n\r\n// Random matrix of n rows, m columns\r\nMatrix.Random = function(n, m) {\r\n  return Matrix.Zero(n, m).map(\r\n    function() { return Math.random(); }\r\n  );\r\n};\r\n\r\n// Matrix filled with zeros\r\nMatrix.Zero = function(n, m) {\r\n  var els = [], ni = n, i, nj, j;\r\n  do { i = n - ni;\r\n    els[i] = [];\r\n    nj = m;\r\n    do { j = m - nj;\r\n      els[i][j] = 0;\r\n    } while (--nj);\r\n  } while (--ni);\r\n  return Matrix.create(els);\r\n};\r\n\r\n\r\n\r\nfunction Line() {}\r\nLine.prototype = {\r\n\r\n  // Returns true if the argument occupies the same space as the line\r\n  eql: function(line) {\r\n    return (this.isParallelTo(line) && this.contains(line.anchor));\r\n  },\r\n\r\n  // Returns a copy of the line\r\n  dup: function() {\r\n    return Line.create(this.anchor, this.direction);\r\n  },\r\n\r\n  // Returns the result of translating the line by the given vector/array\r\n  translate: function(vector) {\r\n    var V = vector.elements || vector;\r\n    return Line.create([\r\n      this.anchor.elements[0] + V[0],\r\n      this.anchor.elements[1] + V[1],\r\n      this.anchor.elements[2] + (V[2] || 0)\r\n    ], this.direction);\r\n  },\r\n\r\n  // Returns true if the line is parallel to the argument. Here, 'parallel to'\r\n  // means that the argument's direction is either parallel or antiparallel to\r\n  // the line's own direction. A line is parallel to a plane if the two do not\r\n  // have a unique intersection.\r\n  isParallelTo: function(obj) {\r\n    if (obj.normal) { return obj.isParallelTo(this); }\r\n    var theta = this.direction.angleFrom(obj.direction);\r\n    return (Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision);\r\n  },\r\n\r\n  // Returns the line's perpendicular distance from the argument,\r\n  // which can be a point, a line or a plane\r\n  distanceFrom: function(obj) {\r\n    if (obj.normal) { return obj.distanceFrom(this); }\r\n    if (obj.direction) {\r\n      // obj is a line\r\n      if (this.isParallelTo(obj)) { return this.distanceFrom(obj.anchor); }\r\n      var N = this.direction.cross(obj.direction).toUnitVector().elements;\r\n      var A = this.anchor.elements, B = obj.anchor.elements;\r\n      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\r\n    } else {\r\n      // obj is a point\r\n      var P = obj.elements || obj;\r\n      var A = this.anchor.elements, D = this.direction.elements;\r\n      var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];\r\n      var modPA = Math.sqrt(PA1*PA1 + PA2*PA2 + PA3*PA3);\r\n      if (modPA === 0) return 0;\r\n      // Assumes direction vector is normalized\r\n      var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;\r\n      var sin2 = 1 - cosTheta*cosTheta;\r\n      return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));\r\n    }\r\n  },\r\n\r\n  // Returns true iff the argument is a point on the line\r\n  contains: function(point) {\r\n    var dist = this.distanceFrom(point);\r\n    return (dist !== null && dist <= Sylvester.precision);\r\n  },\r\n\r\n  // Returns true iff the line lies in the given plane\r\n  liesIn: function(plane) {\r\n    return plane.contains(this);\r\n  },\r\n\r\n  // Returns true iff the line has a unique point of intersection with the argument\r\n  intersects: function(obj) {\r\n    if (obj.normal) { return obj.intersects(this); }\r\n    return (!this.isParallelTo(obj) && this.distanceFrom(obj) <= Sylvester.precision);\r\n  },\r\n\r\n  // Returns the unique intersection point with the argument, if one exists\r\n  intersectionWith: function(obj) {\r\n    if (obj.normal) { return obj.intersectionWith(this); }\r\n    if (!this.intersects(obj)) { return null; }\r\n    var P = this.anchor.elements, X = this.direction.elements,\r\n        Q = obj.anchor.elements, Y = obj.direction.elements;\r\n    var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];\r\n    var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];\r\n    var XdotQsubP = - X1*PsubQ1 - X2*PsubQ2 - X3*PsubQ3;\r\n    var YdotPsubQ = Y1*PsubQ1 + Y2*PsubQ2 + Y3*PsubQ3;\r\n    var XdotX = X1*X1 + X2*X2 + X3*X3;\r\n    var YdotY = Y1*Y1 + Y2*Y2 + Y3*Y3;\r\n    var XdotY = X1*Y1 + X2*Y2 + X3*Y3;\r\n    var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);\r\n    return Vector.create([P[0] + k*X1, P[1] + k*X2, P[2] + k*X3]);\r\n  },\r\n\r\n  // Returns the point on the line that is closest to the given point or line\r\n  pointClosestTo: function(obj) {\r\n    if (obj.direction) {\r\n      // obj is a line\r\n      if (this.intersects(obj)) { return this.intersectionWith(obj); }\r\n      if (this.isParallelTo(obj)) { return null; }\r\n      var D = this.direction.elements, E = obj.direction.elements;\r\n      var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];\r\n      // Create plane containing obj and the shared normal and intersect this with it\r\n      // Thank you: http://www.cgafaq.info/wiki/Line-line_distance\r\n      var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);\r\n      var N = Vector.create([x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1]);\r\n      var P = Plane.create(obj.anchor, N);\r\n      return P.intersectionWith(this);\r\n    } else {\r\n      // obj is a point\r\n      var P = obj.elements || obj;\r\n      if (this.contains(P)) { return Vector.create(P); }\r\n      var A = this.anchor.elements, D = this.direction.elements;\r\n      var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];\r\n      var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),\r\n          z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);\r\n      var V = Vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);\r\n      var k = this.distanceFrom(P) / V.modulus();\r\n      return Vector.create([\r\n        P[0] + V.elements[0] * k,\r\n        P[1] + V.elements[1] * k,\r\n        (P[2] || 0) + V.elements[2] * k\r\n      ]);\r\n    }\r\n  },\r\n\r\n  // Returns a copy of the line rotated by t radians about the given line. Works by\r\n  // finding the argument's closest point to this line's anchor point (call this C) and\r\n  // rotating the anchor about C. Also rotates the line's direction about the argument's.\r\n  // Be careful with this - the rotation axis' direction affects the outcome!\r\n  rotate: function(t, line) {\r\n    // If we're working in 2D\r\n    if (typeof(line.direction) == 'undefined') { line = Line.create(line.to3D(), Vector.k); }\r\n    var R = Matrix.Rotation(t, line.direction).elements;\r\n    var C = line.pointClosestTo(this.anchor).elements;\r\n    var A = this.anchor.elements, D = this.direction.elements;\r\n    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];\r\n    var x = A1 - C1, y = A2 - C2, z = A3 - C3;\r\n    return Line.create([\r\n      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,\r\n      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,\r\n      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z\r\n    ], [\r\n      R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],\r\n      R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],\r\n      R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]\r\n    ]);\r\n  },\r\n\r\n  // Returns the line's reflection in the given point or line\r\n  reflectionIn: function(obj) {\r\n    if (obj.normal) {\r\n      // obj is a plane\r\n      var A = this.anchor.elements, D = this.direction.elements;\r\n      var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];\r\n      var newA = this.anchor.reflectionIn(obj).elements;\r\n      // Add the line's direction vector to its anchor, then mirror that in the plane\r\n      var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;\r\n      var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;\r\n      var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];\r\n      return Line.create(newA, newD);\r\n    } else if (obj.direction) {\r\n      // obj is a line - reflection obtained by rotating PI radians about obj\r\n      return this.rotate(Math.PI, obj);\r\n    } else {\r\n      // obj is a point - just reflect the line's anchor in it\r\n      var P = obj.elements || obj;\r\n      return Line.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.direction);\r\n    }\r\n  },\r\n\r\n  // Set the line's anchor point and direction.\r\n  setVectors: function(anchor, direction) {\r\n    // Need to do this so that line's properties are not\r\n    // references to the arguments passed in\r\n    anchor = Vector.create(anchor);\r\n    direction = Vector.create(direction);\r\n    if (anchor.elements.length == 2) {anchor.elements.push(0); }\r\n    if (direction.elements.length == 2) { direction.elements.push(0); }\r\n    if (anchor.elements.length > 3 || direction.elements.length > 3) { return null; }\r\n    var mod = direction.modulus();\r\n    if (mod === 0) { return null; }\r\n    this.anchor = anchor;\r\n    this.direction = Vector.create([\r\n      direction.elements[0] / mod,\r\n      direction.elements[1] / mod,\r\n      direction.elements[2] / mod\r\n    ]);\r\n    return this;\r\n  }\r\n};\r\n\r\n  \r\n// Constructor function\r\nLine.create = function(anchor, direction) {\r\n  var L = new Line();\r\n  return L.setVectors(anchor, direction);\r\n};\r\n\r\n// Axes\r\nLine.X = Line.create(Vector.Zero(3), Vector.i);\r\nLine.Y = Line.create(Vector.Zero(3), Vector.j);\r\nLine.Z = Line.create(Vector.Zero(3), Vector.k);\r\n\r\n\r\n\r\nfunction Plane() {}\r\nPlane.prototype = {\r\n\r\n  // Returns true iff the plane occupies the same space as the argument\r\n  eql: function(plane) {\r\n    return (this.contains(plane.anchor) && this.isParallelTo(plane));\r\n  },\r\n\r\n  // Returns a copy of the plane\r\n  dup: function() {\r\n    return Plane.create(this.anchor, this.normal);\r\n  },\r\n\r\n  // Returns the result of translating the plane by the given vector\r\n  translate: function(vector) {\r\n    var V = vector.elements || vector;\r\n    return Plane.create([\r\n      this.anchor.elements[0] + V[0],\r\n      this.anchor.elements[1] + V[1],\r\n      this.anchor.elements[2] + (V[2] || 0)\r\n    ], this.normal);\r\n  },\r\n\r\n  // Returns true iff the plane is parallel to the argument. Will return true\r\n  // if the planes are equal, or if you give a line and it lies in the plane.\r\n  isParallelTo: function(obj) {\r\n    var theta;\r\n    if (obj.normal) {\r\n      // obj is a plane\r\n      theta = this.normal.angleFrom(obj.normal);\r\n      return (Math.abs(theta) <= Sylvester.precision || Math.abs(Math.PI - theta) <= Sylvester.precision);\r\n    } else if (obj.direction) {\r\n      // obj is a line\r\n      return this.normal.isPerpendicularTo(obj.direction);\r\n    }\r\n    return null;\r\n  },\r\n  \r\n  // Returns true iff the receiver is perpendicular to the argument\r\n  isPerpendicularTo: function(plane) {\r\n    var theta = this.normal.angleFrom(plane.normal);\r\n    return (Math.abs(Math.PI/2 - theta) <= Sylvester.precision);\r\n  },\r\n\r\n  // Returns the plane's distance from the given object (point, line or plane)\r\n  distanceFrom: function(obj) {\r\n    if (this.intersects(obj) || this.contains(obj)) { return 0; }\r\n    if (obj.anchor) {\r\n      // obj is a plane or line\r\n      var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;\r\n      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\r\n    } else {\r\n      // obj is a point\r\n      var P = obj.elements || obj;\r\n      var A = this.anchor.elements, N = this.normal.elements;\r\n      return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);\r\n    }\r\n  },\r\n\r\n  // Returns true iff the plane contains the given point or line\r\n  contains: function(obj) {\r\n    if (obj.normal) { return null; }\r\n    if (obj.direction) {\r\n      return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));\r\n    } else {\r\n      var P = obj.elements || obj;\r\n      var A = this.anchor.elements, N = this.normal.elements;\r\n      var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));\r\n      return (diff <= Sylvester.precision);\r\n    }\r\n  },\r\n\r\n  // Returns true iff the plane has a unique point/line of intersection with the argument\r\n  intersects: function(obj) {\r\n    if (typeof(obj.direction) == 'undefined' && typeof(obj.normal) == 'undefined') { return null; }\r\n    return !this.isParallelTo(obj);\r\n  },\r\n\r\n  // Returns the unique intersection with the argument, if one exists. The result\r\n  // will be a vector if a line is supplied, and a line if a plane is supplied.\r\n  intersectionWith: function(obj) {\r\n    if (!this.intersects(obj)) { return null; }\r\n    if (obj.direction) {\r\n      // obj is a line\r\n      var A = obj.anchor.elements, D = obj.direction.elements,\r\n          P = this.anchor.elements, N = this.normal.elements;\r\n      var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);\r\n      return Vector.create([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);\r\n    } else if (obj.normal) {\r\n      // obj is a plane\r\n      var direction = this.normal.cross(obj.normal).toUnitVector();\r\n      // To find an anchor point, we find one co-ordinate that has a value\r\n      // of zero somewhere on the intersection, and remember which one we picked\r\n      var N = this.normal.elements, A = this.anchor.elements,\r\n          O = obj.normal.elements, B = obj.anchor.elements;\r\n      var solver = Matrix.Zero(2,2), i = 0;\r\n      while (solver.isSingular()) {\r\n        i++;\r\n        solver = Matrix.create([\r\n          [ N[i%3], N[(i+1)%3] ],\r\n          [ O[i%3], O[(i+1)%3]  ]\r\n        ]);\r\n      }\r\n      // Then we solve the simultaneous equations in the remaining dimensions\r\n      var inverse = solver.inverse().elements;\r\n      var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];\r\n      var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];\r\n      var intersection = [\r\n        inverse[0][0] * x + inverse[0][1] * y,\r\n        inverse[1][0] * x + inverse[1][1] * y\r\n      ];\r\n      var anchor = [];\r\n      for (var j = 1; j <= 3; j++) {\r\n        // This formula picks the right element from intersection by\r\n        // cycling depending on which element we set to zero above\r\n        anchor.push((i == j) ? 0 : intersection[(j + (5 - i)%3)%3]);\r\n      }\r\n      return Line.create(anchor, direction);\r\n    }\r\n  },\r\n\r\n  // Returns the point in the plane closest to the given point\r\n  pointClosestTo: function(point) {\r\n    var P = point.elements || point;\r\n    var A = this.anchor.elements, N = this.normal.elements;\r\n    var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];\r\n    return Vector.create([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);\r\n  },\r\n\r\n  // Returns a copy of the plane, rotated by t radians about the given line\r\n  // See notes on Line#rotate.\r\n  rotate: function(t, line) {\r\n    var R = Matrix.Rotation(t, line.direction).elements;\r\n    var C = line.pointClosestTo(this.anchor).elements;\r\n    var A = this.anchor.elements, N = this.normal.elements;\r\n    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];\r\n    var x = A1 - C1, y = A2 - C2, z = A3 - C3;\r\n    return Plane.create([\r\n      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,\r\n      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,\r\n      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z\r\n    ], [\r\n      R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],\r\n      R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],\r\n      R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]\r\n    ]);\r\n  },\r\n\r\n  // Returns the reflection of the plane in the given point, line or plane.\r\n  reflectionIn: function(obj) {\r\n    if (obj.normal) {\r\n      // obj is a plane\r\n      var A = this.anchor.elements, N = this.normal.elements;\r\n      var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];\r\n      var newA = this.anchor.reflectionIn(obj).elements;\r\n      // Add the plane's normal to its anchor, then mirror that in the other plane\r\n      var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;\r\n      var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;\r\n      var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];\r\n      return Plane.create(newA, newN);\r\n    } else if (obj.direction) {\r\n      // obj is a line\r\n      return this.rotate(Math.PI, obj);\r\n    } else {\r\n      // obj is a point\r\n      var P = obj.elements || obj;\r\n      return Plane.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);\r\n    }\r\n  },\r\n\r\n  // Sets the anchor point and normal to the plane. If three arguments are specified,\r\n  // the normal is calculated by assuming the three points should lie in the same plane.\r\n  // If only two are sepcified, the second is taken to be the normal. Normal vector is\r\n  // normalised before storage.\r\n  setVectors: function(anchor, v1, v2) {\r\n    anchor = Vector.create(anchor);\r\n    anchor = anchor.to3D(); if (anchor === null) { return null; }\r\n    v1 = Vector.create(v1);\r\n    v1 = v1.to3D(); if (v1 === null) { return null; }\r\n    if (typeof(v2) == 'undefined') {\r\n      v2 = null;\r\n    } else {\r\n      v2 = Vector.create(v2);\r\n      v2 = v2.to3D(); if (v2 === null) { return null; }\r\n    }\r\n    var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];\r\n    var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];\r\n    var normal, mod;\r\n    if (v2 !== null) {\r\n      var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];\r\n      normal = Vector.create([\r\n        (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),\r\n        (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),\r\n        (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)\r\n      ]);\r\n      mod = normal.modulus();\r\n      if (mod === 0) { return null; }\r\n      normal = Vector.create([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);\r\n    } else {\r\n      mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);\r\n      if (mod === 0) { return null; }\r\n      normal = Vector.create([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);\r\n    }\r\n    this.anchor = anchor;\r\n    this.normal = normal;\r\n    return this;\r\n  }\r\n};\r\n\r\n// Constructor function\r\nPlane.create = function(anchor, v1, v2) {\r\n  var P = new Plane();\r\n  return P.setVectors(anchor, v1, v2);\r\n};\r\n\r\n// X-Y-Z planes\r\nPlane.XY = Plane.create(Vector.Zero(3), Vector.k);\r\nPlane.YZ = Plane.create(Vector.Zero(3), Vector.i);\r\nPlane.ZX = Plane.create(Vector.Zero(3), Vector.j);\r\nPlane.YX = Plane.XY; Plane.ZY = Plane.YZ; Plane.XZ = Plane.ZX;\r\n\r\n// Utility functions\r\nvar $V = Vector.create;\r\nvar $M = Matrix.create;\r\nvar $L = Line.create;\r\nvar $P = Plane.create;\r\n"]}