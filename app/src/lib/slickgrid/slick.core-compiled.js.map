{"version":3,"sources":["slick.core.js"],"names":[],"mappings":"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","file":"slick.core-compiled.js","sourcesContent":["/***\n * Contains core SlickGrid classes.\n * @module Core\n * @namespace Slick\n */\n\n(function ($) {\n  // register namespace\n  $.extend(true, window, {\n    \"Slick\": {\n      \"Event\": Event,\n      \"EventData\": EventData,\n      \"EventHandler\": EventHandler,\n      \"Range\": Range,\n      \"NonDataRow\": NonDataItem,\n      \"Group\": Group,\n      \"GroupTotals\": GroupTotals,\n      \"EditorLock\": EditorLock,\n\n      /***\n       * A global singleton editor lock.\n       * @class GlobalEditorLock\n       * @static\n       * @constructor\n       */\n      \"GlobalEditorLock\": new EditorLock()\n    }\n  });\n\n  /***\n   * An event object for passing data to event handlers and letting them control propagation.\n   * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n   * @class EventData\n   * @constructor\n   */\n  function EventData() {\n    var isPropagationStopped = false;\n    var isImmediatePropagationStopped = false;\n\n    /***\n     * Stops event from propagating up the DOM tree.\n     * @method stopPropagation\n     */\n    this.stopPropagation = function () {\n      isPropagationStopped = true;\n    };\n\n    /***\n     * Returns whether stopPropagation was called on this event object.\n     * @method isPropagationStopped\n     * @return {Boolean}\n     */\n    this.isPropagationStopped = function () {\n      return isPropagationStopped;\n    };\n\n    /***\n     * Prevents the rest of the handlers from being executed.\n     * @method stopImmediatePropagation\n     */\n    this.stopImmediatePropagation = function () {\n      isImmediatePropagationStopped = true;\n    };\n\n    /***\n     * Returns whether stopImmediatePropagation was called on this event object.\\\n     * @method isImmediatePropagationStopped\n     * @return {Boolean}\n     */\n    this.isImmediatePropagationStopped = function () {\n      return isImmediatePropagationStopped;\n    }\n  }\n\n  /***\n   * A simple publisher-subscriber implementation.\n   * @class Event\n   * @constructor\n   */\n  function Event() {\n    var handlers = [];\n\n    /***\n     * Adds an event handler to be called when the event is fired.\n     * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n     * object the event was fired with.<p>\n     * @method subscribe\n     * @param fn {Function} Event handler.\n     */\n    this.subscribe = function (fn) {\n      handlers.push(fn);\n    };\n\n    /***\n     * Removes an event handler added with <code>subscribe(fn)</code>.\n     * @method unsubscribe\n     * @param fn {Function} Event handler to be removed.\n     */\n    this.unsubscribe = function (fn) {\n      for (var i = handlers.length - 1; i >= 0; i--) {\n        if (handlers[i] === fn) {\n          handlers.splice(i, 1);\n        }\n      }\n    };\n\n    /***\n     * Fires an event notifying all subscribers.\n     * @method notify\n     * @param args {Object} Additional data object to be passed to all handlers.\n     * @param e {EventData}\n     *      Optional.\n     *      An <code>EventData</code> object to be passed to all handlers.\n     *      For DOM events, an existing W3C/jQuery event object can be passed in.\n     * @param scope {Object}\n     *      Optional.\n     *      The scope (\"this\") within which the handler will be executed.\n     *      If not specified, the scope will be set to the <code>Event</code> instance.\n     */\n    this.notify = function (args, e, scope) {\n      e = e || new EventData();\n      scope = scope || this;\n\n      var returnValue;\n      for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n        returnValue = handlers[i].call(scope, e, args);\n      }\n\n      return returnValue;\n    };\n  }\n\n  function EventHandler() {\n    var handlers = [];\n\n    this.subscribe = function (event, handler) {\n      handlers.push({\n        event: event,\n        handler: handler\n      });\n      event.subscribe(handler);\n\n      return this;  // allow chaining\n    };\n\n    this.unsubscribe = function (event, handler) {\n      var i = handlers.length;\n      while (i--) {\n        if (handlers[i].event === event &&\n            handlers[i].handler === handler) {\n          handlers.splice(i, 1);\n          event.unsubscribe(handler);\n          return;\n        }\n      }\n\n      return this;  // allow chaining\n    };\n\n    this.unsubscribeAll = function () {\n      var i = handlers.length;\n      while (i--) {\n        handlers[i].event.unsubscribe(handlers[i].handler);\n      }\n      handlers = [];\n\n      return this;  // allow chaining\n    }\n  }\n\n  /***\n   * A structure containing a range of cells.\n   * @class Range\n   * @constructor\n   * @param fromRow {Integer} Starting row.\n   * @param fromCell {Integer} Starting cell.\n   * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n   * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n   */\n  function Range(fromRow, fromCell, toRow, toCell) {\n    if (toRow === undefined && toCell === undefined) {\n      toRow = fromRow;\n      toCell = fromCell;\n    }\n\n    /***\n     * @property fromRow\n     * @type {Integer}\n     */\n    this.fromRow = Math.min(fromRow, toRow);\n\n    /***\n     * @property fromCell\n     * @type {Integer}\n     */\n    this.fromCell = Math.min(fromCell, toCell);\n\n    /***\n     * @property toRow\n     * @type {Integer}\n     */\n    this.toRow = Math.max(fromRow, toRow);\n\n    /***\n     * @property toCell\n     * @type {Integer}\n     */\n    this.toCell = Math.max(fromCell, toCell);\n\n    /***\n     * Returns whether a range represents a single row.\n     * @method isSingleRow\n     * @return {Boolean}\n     */\n    this.isSingleRow = function () {\n      return this.fromRow == this.toRow;\n    };\n\n    /***\n     * Returns whether a range represents a single cell.\n     * @method isSingleCell\n     * @return {Boolean}\n     */\n    this.isSingleCell = function () {\n      return this.fromRow == this.toRow && this.fromCell == this.toCell;\n    };\n\n    /***\n     * Returns whether a range contains a given cell.\n     * @method contains\n     * @param row {Integer}\n     * @param cell {Integer}\n     * @return {Boolean}\n     */\n    this.contains = function (row, cell) {\n      return row >= this.fromRow && row <= this.toRow &&\n          cell >= this.fromCell && cell <= this.toCell;\n    };\n\n    /***\n     * Returns a readable representation of a range.\n     * @method toString\n     * @return {String}\n     */\n    this.toString = function () {\n      if (this.isSingleCell()) {\n        return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n      }\n      else {\n        return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n      }\n    }\n  }\n\n\n  /***\n   * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n   * @class NonDataItem\n   * @constructor\n   */\n  function NonDataItem() {\n    this.__nonDataRow = true;\n  }\n\n\n  /***\n   * Information about a group of rows.\n   * @class Group\n   * @extends Slick.NonDataItem\n   * @constructor\n   */\n  function Group() {\n    this.__group = true;\n    this.__updated = false;\n\n    /***\n     * Number of rows in the group.\n     * @property count\n     * @type {Integer}\n     */\n    this.count = 0;\n\n    /***\n     * Grouping value.\n     * @property value\n     * @type {Object}\n     */\n    this.value = null;\n\n    /***\n     * Formatted display value of the group.\n     * @property title\n     * @type {String}\n     */\n    this.title = null;\n\n    /***\n     * Whether a group is collapsed.\n     * @property collapsed\n     * @type {Boolean}\n     */\n    this.collapsed = false;\n\n    /***\n     * GroupTotals, if any.\n     * @property totals\n     * @type {GroupTotals}\n     */\n    this.totals = null;\n  }\n\n  Group.prototype = new NonDataItem();\n\n  /***\n   * Compares two Group instances.\n   * @method equals\n   * @return {Boolean}\n   * @param group {Group} Group instance to compare to.\n   */\n  Group.prototype.equals = function (group) {\n    return this.value === group.value &&\n        this.count === group.count &&\n        this.collapsed === group.collapsed;\n  };\n\n  /***\n   * Information about group totals.\n   * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n   * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n   * formatters during the display.\n   * @class GroupTotals\n   * @extends Slick.NonDataItem\n   * @constructor\n   */\n  function GroupTotals() {\n    this.__groupTotals = true;\n\n    /***\n     * Parent Group.\n     * @param group\n     * @type {Group}\n     */\n    this.group = null;\n  }\n\n  GroupTotals.prototype = new NonDataItem();\n\n  /***\n   * A locking helper to track the active edit controller and ensure that only a single controller\n   * can be active at a time.  This prevents a whole class of state and validation synchronization\n   * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n   * and attempt a commit or cancel before proceeding.\n   * @class EditorLock\n   * @constructor\n   */\n  function EditorLock() {\n    var activeEditController = null;\n\n    /***\n     * Returns true if a specified edit controller is active (has the edit lock).\n     * If the parameter is not specified, returns true if any edit controller is active.\n     * @method isActive\n     * @param editController {EditController}\n     * @return {Boolean}\n     */\n    this.isActive = function (editController) {\n      return (editController ? activeEditController === editController : activeEditController !== null);\n    };\n\n    /***\n     * Sets the specified edit controller as the active edit controller (acquire edit lock).\n     * If another edit controller is already active, and exception will be thrown.\n     * @method activate\n     * @param editController {EditController} edit controller acquiring the lock\n     */\n    this.activate = function (editController) {\n      if (editController === activeEditController) { // already activated?\n        return;\n      }\n      if (activeEditController !== null) {\n        throw \"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\";\n      }\n      if (!editController.commitCurrentEdit) {\n        throw \"SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\";\n      }\n      if (!editController.cancelCurrentEdit) {\n        throw \"SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\";\n      }\n      activeEditController = editController;\n    };\n\n    /***\n     * Unsets the specified edit controller as the active edit controller (release edit lock).\n     * If the specified edit controller is not the active one, an exception will be thrown.\n     * @method deactivate\n     * @param editController {EditController} edit controller releasing the lock\n     */\n    this.deactivate = function (editController) {\n      if (activeEditController !== editController) {\n        throw \"SlickGrid.EditorLock.deactivate: specified editController is not the currently active one\";\n      }\n      activeEditController = null;\n    };\n\n    /***\n     * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n     * controller and returns whether the commit attempt was successful (commit may fail due to validation\n     * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n     * and false otherwise.  If no edit controller is active, returns true.\n     * @method commitCurrentEdit\n     * @return {Boolean}\n     */\n    this.commitCurrentEdit = function () {\n      return (activeEditController ? activeEditController.commitCurrentEdit() : true);\n    };\n\n    /***\n     * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n     * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n     * active, returns true.\n     * @method cancelCurrentEdit\n     * @return {Boolean}\n     */\n    this.cancelCurrentEdit = function cancelCurrentEdit() {\n      return (activeEditController ? activeEditController.cancelCurrentEdit() : true);\n    };\n  }\n})(jQuery);\n\n\n"]}